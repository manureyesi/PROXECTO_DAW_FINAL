/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vtenda;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DAW221
 */
public class TPV extends javax.swing.JDialog {

    public DefaultTableModel modelo;
    
    public static CarritoCompra CCompra;
    public static ArrayList<CarritoCompra> gardarCarrito = new ArrayList<CarritoCompra>();
    
    public int countProductos = 0;
    public static int auxTicket = 0;
    
    public double total = 0;
    
    public TPV(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        Image icono = Toolkit.getDefaultToolkit().getImage(VTenda.dirIMG);
        this.setIconImage(icono);
        this.setLocationRelativeTo(null);
        
        String cabecera[]={"Articulo", "Nombre", "Unidades", "Pre Unidad", "%", "Precio"};
        String datos[][]={};
        
        modelo = new DefaultTableModel(datos, cabecera);
        this.productos.setModel(modelo);
        
        this.productos.setModel(modelo);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jLVendedor = new javax.swing.JLabel();
        nomeVendedor = new javax.swing.JTextField();
        jLFecha = new javax.swing.JLabel();
        fecha1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        productos = new javax.swing.JTable();
        volver = new javax.swing.JButton();
        cerrarTicket = new javax.swing.JButton();
        codVendedor = new javax.swing.JTextField();
        jLProducto = new javax.swing.JLabel();
        codProducto = new javax.swing.JTextField();
        jLNombre = new javax.swing.JLabel();
        nombreProducto = new javax.swing.JTextField();
        jLDescuento = new javax.swing.JLabel();
        descuento = new javax.swing.JTextField();
        jLUnidades = new javax.swing.JLabel();
        jLPrecio = new javax.swing.JLabel();
        unidades = new javax.swing.JTextField();
        precio = new javax.swing.JTextField();
        anadir = new javax.swing.JButton();
        errores = new javax.swing.JLabel();
        totalTicket = new javax.swing.JTextField();
        jLTotalTicket = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        guardaTicket = new javax.swing.JButton();
        recuperarTicket = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("VTenda - TPV");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jLVendedor.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLVendedor.setText("Vendedor:");

        nomeVendedor.setEditable(false);

        jLFecha.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLFecha.setText("Fecha:");

        fecha1.setEditable(false);

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        productos.setEditingColumn(0);
        productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(productos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        volver.setBackground(new java.awt.Color(204, 204, 204));
        volver.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        volver.setText("Volver");
        volver.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });

        cerrarTicket.setBackground(new java.awt.Color(204, 204, 204));
        cerrarTicket.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cerrarTicket.setText("Cerrar Ticket");
        cerrarTicket.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cerrarTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarTicketActionPerformed(evt);
            }
        });

        codVendedor.setEditable(false);
        codVendedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                presionarF4(evt);
            }
        });

        jLProducto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLProducto.setText("COD. PRODUCTO:");

        codProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codProductoKeyPressed(evt);
            }
        });

        jLNombre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLNombre.setText("NOMBRE PRODUCTO:");

        nombreProducto.setEditable(false);

        jLDescuento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLDescuento.setText("Descuento%:");

        descuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                descuentoKeyPressed(evt);
            }
        });

        jLUnidades.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLUnidades.setText("Unidades:");

        jLPrecio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLPrecio.setText("Precio:");

        precio.setEditable(false);

        anadir.setBackground(new java.awt.Color(204, 204, 204));
        anadir.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        anadir.setText("AÃ±adir");
        anadir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        anadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anadirActionPerformed(evt);
            }
        });

        errores.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        totalTicket.setEditable(false);
        totalTicket.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalTicket.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLTotalTicket.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLTotalTicket.setText("Total Ticket:");

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        guardaTicket.setBackground(new java.awt.Color(204, 204, 204));
        guardaTicket.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        guardaTicket.setText("Guardar Ticket");
        guardaTicket.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        guardaTicket.setEnabled(false);
        guardaTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardaTicketActionPerformed(evt);
            }
        });

        recuperarTicket.setBackground(new java.awt.Color(204, 204, 204));
        recuperarTicket.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        recuperarTicket.setText("Recuperar Ticket");
        recuperarTicket.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        recuperarTicket.setEnabled(false);
        recuperarTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recuperarTicketActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(guardaTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(recuperarTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardaTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recuperarTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLProducto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codVendedor))
                            .addComponent(codProducto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(nomeVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(nombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLDescuento, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                    .addComponent(descuento))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLUnidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(precio, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                    .addComponent(unidades)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fecha1))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(anadir, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(errores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cerrarTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(volver, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLTotalTicket)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(totalTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nomeVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(codVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLVendedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLDescuento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLUnidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(unidades, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descuento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anadir, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errores, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(volver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cerrarTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(totalTicket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLTotalTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed
        dispose();
    }//GEN-LAST:event_volverActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here: 
    }//GEN-LAST:event_formWindowActivated

    private void anadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anadirActionPerformed
        
        int uni = 0;
        int des = 0;
        
       try{
           
           boolean error = false;
           
           try{
               
               uni = Integer.parseInt(this.unidades.getText());
               
               if(!this.descuento.getText().isEmpty()){
                   des = Integer.parseInt(this.descuento.getText());
               }
               
               
           }
           catch(NumberFormatException ex){
               error = true;
           }
           
           if(this.codProducto.getText().isEmpty()||this.unidades.getText().isEmpty()||this.nombreProducto.getText().isEmpty()){
               this.errores.setText("No se permiten campos vacios");
           }
           else if(error == true){
               this.errores.setText("Compruebe los campos numericos");
           }
           else{
               
                this.errores.setText("");
               
                /*Conexion contra DB*/
                db.consultas con = new db.consultas();
               
                /*Consulta Producto*/
                ResultSet rs = con.select("productos", "cod = '"+this.codProducto.getText()+"'");
                
                boolean stock = false;
                int maxStock = 0;
                
                
                while(rs.next()){
                    
                    /* Comprobar Stock */
                    if(rs.getInt("stock")>= Integer.parseInt(this.unidades.getText())){
                        
                        stock = true;
                    
                    }
                    else{
                        
                        maxStock = rs.getInt("stock");
                        
                    }
                
                }
                
                if(stock == false){
                    this.errores.setText("No tiene suficiente Stock");
                    this.unidades.setText(maxStock+"");
                }
                else{
                    
                    
                    for(int i = 0 ; i== modelo.getRowCount() ; i++){
                    }
                    System.out.println(modelo.getRowCount());
                    
                    
                    if(countProductos == 0){
                        
                        this.guardaTicket.setEnabled(true);
                        this.recuperarTicket.setEnabled(false);
                        
                        int codVendedor = 0;
                        
                        /*Buscar Codigo Usuario*/
                        rs = con.select("usuarios", "usuario = '"+VTenda.usuario+"'");
                        
                        while(rs.next()){
                            
                            codVendedor = rs.getInt("cod");
                            
                        }
                        
                        /*Iniciar Ticket*/
                        con.insert("ticket", "codVendedor, estado", "'"+codVendedor+"', 'Iniciado'");
                        
                        /*Buscar cod Ticket*/
                        rs = con.selectEspecial("MAX(`cod`)CodMax", "ticket", "codVendedor = "+codVendedor+" and estado = 'Iniciado'");
                        
                        while(rs.next()){
                            
                            auxTicket = rs.getInt("CodMax");
                            VTenda.auxTicketGuardar = rs.getInt("CodMax");
                        }
                        
                    }
                    
                    countProductos++;
                    
                    /* Iniciar Valores */
                    
                    String cod = this.codProducto.getText();
                    String nome = this.nombreProducto.getText();
                    double precioIVA = Double.parseDouble(this.precio.getText());
                    double precioFinal = precioIVA*uni;
                    
                    /* Comprobar descuentos */
                    
                    if(!this.descuento.getText().isEmpty()){
                        
                        double desc = 0;
                        
                        desc = des/100;
                        
                        precioFinal = precioFinal - (precioFinal * desc);
                        
                    }
                    
                    /*Buscar Producto*/
                    rs = con.select("productos", "cod = "+this.codProducto.getText());
                        
                    while(rs.next()){
                            
                        /*Quitar stock producto*/
                        con.update("productos", "stock = "+(rs.getInt("stock") - uni), "cod = "+this.codProducto.getText());
                        
                    }
                        
                    /*Insertar Producto*/
                    con.insert("productosTicket", "codTicket, codProducto, stock, descuento, precioIVA", auxTicket+", '"+this.codProducto.getText()+"', "+uni+", "+des+", "+Double.parseDouble(this.precio.getText()));
                                         
                    Object datos[]={cod, nome, uni, precioIVA, des + " %", precioFinal};
                    modelo.addRow(datos);
                                
                    total += precioFinal;
                    
                    Redondear rd = new Redondear();
                        
                    this.totalTicket.setText(rd.redondearDecimales(total)+" â¬");
                                       
                    this.codProducto.setText("");
                    this.nombreProducto.setText("");
                    this.unidades.setText("");
                    this.precio.setText("");
                    this.errores.setText("");
                    
                }
                
                
           }
           
       }
       catch(SQLException ex){
           System.err.println("Acabamos de sufrir un error contra la DB");
           this.errores.setText("Lo sentimos, acabamos de sufrir un error");
       }
        
    }//GEN-LAST:event_anadirActionPerformed

    private void codProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codProductoKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            
            this.descuento.setText("");
            
            try{

                /*Conexion contra DB*/
                db.consultas con = new db.consultas();

                /*Consulta Producto*/
                ResultSet rs = con.select("productos", "cod = '"+this.codProducto.getText()+"'");
                
                boolean encontrado = false;
                
                while(rs.next()){
                    
                    if(rs.getInt("stock") == 0){
                        this.errores.setText("El producto no se encuentra disponible");
                        encontrado = true;
                        
                        this.nombreProducto.setText("");
                        this.precio.setText("");
                        this.unidades.setText("");
                        this.descuento.setText("");
                        
                        
                    }
                    else if(rs.getString("cod").compareTo(this.codProducto.getText()) == 0){
                    
                        Productos p1= new Productos();
                        p1.setCodArticulo(this.codProducto.getText());
                        p1.setPrecioSin(rs.getDouble("precioSin"));
                        p1.setNomeArticulo(rs.getString("nombre"));


                        this.nombreProducto.setText(p1.getNomeArticulo());

                        this.precio.setText((p1.getPrecioSin() + p1.getIVA()) + "");

                        this.unidades.setText("1");
                        encontrado = true;
                        
                        this.errores.setText("");
                        
                        this.descuento.requestFocus();
                        
                    }

                }
                
                if(encontrado == false){
                    this.errores.setText("No se encontro el producto");
                }
                
            }catch(SQLException ex){
                System.err.println("Problemas al conectar con la DB");
                this.errores.setText("Lo sentimos, acabamos de sufrir un error");
            }
        
        }
        
    }//GEN-LAST:event_codProductoKeyPressed

    private void cerrarTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarTicketActionPerformed
        
                
        PaFinalizarTicket PaFinalizarTicket = new PaFinalizarTicket(new javax.swing.JDialog(), true);
        PaFinalizarTicket.setVisible(true);
        
        if(auxTicket == 0){
            
            countProductos = 0;
            auxTicket = 0;
            total = 0;
            this.totalTicket.setText("");
        
            try{

                int a=modelo.getRowCount();

                for (int i = 0; i < a; i++) {
                    modelo.removeRow(0);
                }

            }catch(Exception ex){
                System.err.println(ex.getMessage());
            }
            
            this.guardaTicket.setEnabled(false);
            
        }
        else{
            
            this.errores.setText("Cierre de Ticket cancelado");
            
            
        }
        
        
        
    }//GEN-LAST:event_cerrarTicketActionPerformed

    private void descuentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descuentoKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            
            this.unidades.requestFocus();
        
        }
        
    }//GEN-LAST:event_descuentoKeyPressed

    private void productosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productosMouseClicked
        
        int row = this.productos.getSelectedRow();
        System.err.println("Clicando a fila "+row+" da tabla");
        
    }//GEN-LAST:event_productosMouseClicked

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:       
    }//GEN-LAST:event_formKeyPressed

    private void presionarF4(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_presionarF4
        // TODO add your handling code here:      
    }//GEN-LAST:event_presionarF4

    private void guardaTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardaTicketActionPerformed
        
        VTenda.auxTicketGuardar = auxTicket;
        
        System.out.println("Preparandose para guardar Ticket");
        
        guardaTicket.GuardarTicket GuardaTicket = new guardaTicket.GuardarTicket(new javax.swing.JDialog(),true);
        GuardaTicket.setVisible(true);
        
        switch(VTenda.guardarTicket){
            
            case 0:
                
                System.out.println("Cancelada operacion de guardar ticket");
                
                
            break;
            
            case 1:
                
                System.out.println("Ticket "+this.auxTicket+" Guardado con exito");
                this.auxTicket = 0;


                /********************* LIMPIAR TABLA *******************/

                try{

                    int a=modelo.getRowCount();

                    for (int i = 0; i < a; i++) {
                        modelo.removeRow(0);
                    }

                }catch(Exception ex){
                    System.err.println(ex.getMessage());
                }

                /********************* LIMPIAR JTEXT *******************/

                this.codProducto.setText("");
                this.nombreProducto.setText("");
                this.descuento.setText("");
                this.precio.setText("");
                this.unidades.setText("");
                this.totalTicket.setText("");
                this.guardaTicket.setEnabled(false);
                this.recuperarTicket.setEnabled(true);
                this.errores.setText("Ticket Guardado con exito");
                
            break;
            
            case 2:
                
                System.err.println("Error en guardar Ticket");
                this.errores.setText("Error al Guardar Ticket");
                
            break;
            
            
        }
        
        
    }//GEN-LAST:event_guardaTicketActionPerformed

    private void recuperarTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recuperarTicketActionPerformed

        this.recuperarTicket.setEnabled(false);
        
        /* Declarar Consultas */
        db.consultas con = new db.consultas();
        
        System.out.println("Preparandose para recuperar Ticket");
        guardaTicket.RecuperaTicket RecuperaTicket = new guardaTicket.RecuperaTicket(new javax.swing.JDialog(),true);
        RecuperaTicket.setVisible(true);
        
        switch(VTenda.guardarTicket){
            
            case 0:
                
                System.out.println("Cancelada operacion de recuperar ticket");
                
                
            break;
            
            case 1:
                this.auxTicket = VTenda.auxTicketGuardar;
                System.out.println("Ticket "+this.auxTicket+" Preparado para recuperarse");
                
                /********************* LIMPIAR TABLA *******************/

                try{

                    int a=modelo.getRowCount();

                    for (int i = 0; i < a; i++) {
                        modelo.removeRow(0);
                    }

                }catch(Exception ex){
                    System.err.println(ex.getMessage());
                }

                /********************* LIMPIAR JTEXT *******************/

                this.codProducto.setText("");
                this.nombreProducto.setText("");
                this.descuento.setText("");
                this.precio.setText("");
                this.unidades.setText("");
                this.totalTicket.setText("");
                this.guardaTicket.setEnabled(false);
                this.errores.setText("Ticket Recuperado con exito");
                
                /* Introducir datos */
                
                try{
                    
                    /* Recuperar Ticket */
                    ResultSet rs = con.select("productosTicket", "codTicket = "+VTenda.auxTicketGuardar);
                    
                    double precioFin = 0;
                    
                    while(rs.next()){
                        
                        ResultSet proc = con.select("productos", "cod = '"+rs.getString("codProducto")+"'");
                        
                        /* Recuperar datos de Stock */
                        while(proc.next()){
                            
                            countProductos++;
                            
                            Productos producto = new Productos(proc.getString("cod"), proc.getString("nombre"), proc.getDouble("PrecioSin"), rs.getInt("stock"), "");
                            
                            Object datos[]={producto.getCodArticulo(), producto.getNomeArticulo(), producto.getStock(), producto.getPrecioSin(), rs.getInt("descuento") + " %", rs.getDouble("precioIVA")};
                            modelo.addRow(datos);
                            
                            precioFin += rs.getDouble("precioIVA");
                            
                        }
                        
                    }
                    
                    
                    /* Cambio de estado Ticket */
                    con.update("ticket", "estado = 'Iniciado'", "cod = "+VTenda.auxTicketGuardar);
                    
                    this.totalTicket.setText(precioFin+" â¬");
                    
                    /* Habilitar Guardado de Ticket */
                    this.guardaTicket.setEnabled(true);
                    
                    /* Desabilitar Recuperacion de Ticket */
                    this.recuperarTicket.setEnabled(false);
                    
                    
                    
                }
                catch(SQLException ex){
                    System.err.println("Error al conectar con la DB al recuperar Ticket");
                    this.errores.setText("Error al recuperar Ticket");
                }
                
                
            break;
            
            case 2:
                
                System.err.println("Erron en guardar Ticket");
                this.errores.setText("Error al Guardar Ticket");
                
            break;
            
        }
        
        
    }//GEN-LAST:event_recuperarTicketActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        /* Desbloquear Ticket */
        db.consultas con = new db.consultas();
                            
        /* Inicializar Precio Total Ticket */
        
        total = 0;

        /* Vendedor */
        this.nomeVendedor.setText(VTenda.vendedor.getNomeVendedor());
        this.codVendedor.setText(VTenda.vendedor.getNumVendedor()+"");

        /********************* LIMPIAR TABLA *******************/

        try{

            int a=modelo.getRowCount();

            for (int i = 0; i < a; i++) {
                modelo.removeRow(0);
            }

        }catch(Exception ex){
            System.err.println(ex.getMessage());
        }

        /********************* LIMPIAR JTEXT *******************/

        this.codProducto.setText("");
        this.nombreProducto.setText("");
        this.descuento.setText("");
        this.precio.setText("");
        this.unidades.setText("");
        this.errores.setText("");

        /********************* LIMPIAR ARRAYLIST ***************/

        gardarCarrito.clear();

        
        /* Fecha TPV */
        Date fechaActual = new Date();
        
        String dd;
    
        Calendar fecha = Calendar.getInstance();
            int aÃ±o = fecha.get(Calendar.YEAR);
            int mes = fecha.get(Calendar.MONTH) + 1;
            int dia = fecha.get(Calendar.DAY_OF_MONTH);
            
        dd=dia+" / "+mes+" / "+aÃ±o;

        fecha1.setText(dd);
        
        /********* BUSCANDO TICKETS GUARDADOS ***************/
        
        try {
            
            ResultSet rs = con.selectEspecial("count(*)", "ticket", "estado = 'Guardado'");
            
            while(rs.next()){
                
                if(rs.getInt(1) != 0){
                    this.recuperarTicket.setEnabled(true);
                }
                
            }
            
        } catch (SQLException ex) {
            System.err.println("Problemas al Conectar con la DB");
            this.errores.setText("Error al buscar Tickets Guardados");
        }
        
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TPV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TPV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TPV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TPV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TPV dialog = new TPV(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anadir;
    private javax.swing.JButton cerrarTicket;
    private javax.swing.JTextField codProducto;
    private javax.swing.JTextField codVendedor;
    private javax.swing.JTextField descuento;
    private javax.swing.JLabel errores;
    private javax.swing.JTextField fecha1;
    private javax.swing.JButton guardaTicket;
    private javax.swing.JLabel jLDescuento;
    private javax.swing.JLabel jLFecha;
    private javax.swing.JLabel jLNombre;
    private javax.swing.JLabel jLPrecio;
    private javax.swing.JLabel jLProducto;
    private javax.swing.JLabel jLTotalTicket;
    private javax.swing.JLabel jLUnidades;
    private javax.swing.JLabel jLVendedor;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField nombreProducto;
    private javax.swing.JTextField nomeVendedor;
    private javax.swing.JTextField precio;
    private javax.swing.JTable productos;
    private javax.swing.JButton recuperarTicket;
    private javax.swing.JTextField totalTicket;
    private javax.swing.JTextField unidades;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables
}
